import { ElementRef, ChangeDetectorRef, EventEmitter } from '@angular/core';
declare type StencilComponents<T extends keyof StencilElementInterfaces> = StencilElementInterfaces[T];
export declare interface SuperTab extends StencilComponents<'SuperTab'> {
}
export declare class SuperTab {
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef);
}
export declare interface SuperTabButton extends StencilComponents<'SuperTabButton'> {
}
export declare class SuperTabButton {
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef);
}
export declare interface SuperTabs extends StencilComponents<'SuperTabs'> {
}
export declare class SuperTabs {
    tabChange: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef);
}
export declare interface SuperTabsContainer extends StencilComponents<'SuperTabsContainer'> {
}
export declare class SuperTabsContainer {
    activeTabIndexChange: EventEmitter<CustomEvent>;
    selectedTabIndexChange: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef);
}
export declare interface SuperTabsToolbar extends StencilComponents<'SuperTabsToolbar'> {
}
export declare class SuperTabsToolbar {
    buttonClick: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef);
}
export {};
