import { checkGesture, getNormalizedScrollX, pointerCoord, scrollEl } from '../utils';
export class SuperTabsContainerComponent {
    constructor() {
        this.swipeEnabled = true;
        this.autoScrollTop = false;
        this.tabs = [];
        this._activeTabIndex = 0;
        this.leftThreshold = 0;
        this.rightThreshold = 0;
        this.scrollWidth = 0;
        this.clientWidth = 0;
    }
    componentDidLoad() {
        this.indexTabs();
    }
    componentDidUpdate() {
        this.indexTabs();
    }
    moveContainerByIndex(index, animate) {
        const scrollX = this.indexToPosition(index);
        return this.moveContainer(scrollX, animate);
    }
    moveContainer(scrollX, animate) {
        scrollEl(this.el, scrollX, 0, animate ? this.config.transitionDuration : 0, this.queue);
    }
    setActiveTabIndex(index) {
        if (this._activeTabIndex === index) {
            if (!this.autoScrollTop) {
                return;
            }
            const current = this.tabs[this._activeTabIndex];
            this.queue.read(() => {
                current.getRootScrollableEl()
                    .then(el => {
                    if (el) {
                        this.queue.write(() => {
                            scrollEl(el, 0, 0, this.config.transitionDuration, this.queue);
                        });
                    }
                });
            });
        }
        this.moveContainerByIndex(index, true);
        this.updateActiveTabIndex(index, false);
    }
    updateActiveTabIndex(index, emit = true) {
        this._activeTabIndex = index;
        emit && this.activeTabIndexChange.emit(this._activeTabIndex);
    }
    updateSelectedTabIndex(index) {
        if (index === this._selectedTabIndex) {
            return;
        }
        this._selectedTabIndex = index;
        this.selectedTabIndexChange.emit(this._selectedTabIndex);
    }
    async onWindowResize() {
        this.indexTabs();
    }
    async onTouchStart(ev) {
        if (!this.swipeEnabled) {
            return;
        }
        let avoid = false;
        let element = ev.target;
        if (element) {
            do {
                if (typeof element.getAttribute === 'function' && element.getAttribute('avoid-super-tabs')) {
                    this.shouldCapture = false;
                    return;
                }
                element = element.parentElement;
            } while (element && !avoid);
        }
        const coords = pointerCoord(ev);
        const vw = this.clientWidth;
        if (coords.x < this.leftThreshold || coords.x > vw - this.rightThreshold) {
            this.shouldCapture = false;
            return;
        }
        this.initialCoords = coords;
        if (this.config.shortSwipeDuration > 0) {
            this.initialTimestamp = window.performance.now();
        }
        this.lastPosX = coords.x;
    }
    async onTouchMove(ev) {
        if (!this.swipeEnabled) {
            return;
        }
        this.queue.read(() => {
            const coords = pointerCoord(ev);
            if (!this.isDragging) {
                if (typeof this.shouldCapture !== 'boolean') {
                    this.shouldCapture = checkGesture(coords, this.initialCoords, this.config);
                }
                if (this.shouldCapture !== true) {
                    return;
                }
                this.isDragging = true;
            }
            if (!this.config.allowElementScroll) {
                ev.stopPropagation();
                ev.preventDefault();
            }
            const deltaX = this.lastPosX - coords.x;
            if (deltaX === 0) {
                return;
            }
            const scrollLeft = this.el.scrollLeft;
            const scrollX = getNormalizedScrollX(this.el, deltaX);
            if (scrollX === scrollLeft) {
                return;
            }
            this.updateSelectedTabIndex(this.positionToIndex(scrollX));
            this.queue.write(() => {
                this.lastPosX = coords.x;
                this.moveContainer(scrollX, false);
            });
        });
    }
    async onTouchEnd(ev) {
        if (!this.swipeEnabled) {
            return;
        }
        const coords = pointerCoord(ev);
        if (this.shouldCapture === true) {
            const deltaTime = window.performance.now() - this.initialTimestamp;
            const shortSwipe = this.config.shortSwipeDuration > 0 && deltaTime <= this.config.shortSwipeDuration;
            const shortSwipeDelta = coords.x - this.initialCoords.x;
            this.queue.read(() => {
                let selectedTabIndex = this.calcSelectedTab();
                const expectedTabIndex = Math.round(selectedTabIndex);
                if (shortSwipe && expectedTabIndex === this._activeTabIndex) {
                    selectedTabIndex += shortSwipeDelta > 0 ? -1 : 1;
                }
                selectedTabIndex = this.normalizeSelectedTab(selectedTabIndex);
                this.updateActiveTabIndex(selectedTabIndex);
                this.queue.write(() => {
                    this.moveContainer(this.indexToPosition(selectedTabIndex), true);
                });
            });
        }
        this.isDragging = false;
        this.shouldCapture = void 0;
    }
    indexTabs() {
        this.queue.read(() => {
            this.scrollWidth = this.el.scrollWidth;
            this.clientWidth = this.el.clientWidth;
            const tabs = this.el.querySelectorAll('super-tab');
            const tabsArray = [];
            for (let i = 0; i < tabs.length; i++) {
                tabsArray.push(tabs[i]);
            }
            this.tabs = tabsArray;
        });
        if (this.config.sideMenu === 'both' || this.config.sideMenu === 'left') {
            this.leftThreshold = this.config.sideMenuThreshold;
        }
        if (this.config.sideMenu === 'both' || this.config.sideMenu === 'right') {
            this.rightThreshold = this.config.sideMenuThreshold;
        }
    }
    calcSelectedTab() {
        const tabsWidth = this.scrollWidth;
        const tabWidth = this.clientWidth;
        const minX = 0;
        const maxX = tabsWidth - tabWidth;
        const scrollX = Math.max(minX, Math.min(maxX, this.el.scrollLeft));
        return this.positionToIndex(scrollX);
    }
    positionToIndex(scrollX) {
        const tabWidth = this.clientWidth;
        return scrollX / tabWidth;
    }
    indexToPosition(scrollX) {
        const tabWidth = this.clientWidth;
        return scrollX * tabWidth;
    }
    normalizeSelectedTab(index) {
        const tabsWidth = this.scrollWidth;
        const tabWidth = this.clientWidth;
        const minX = 0;
        const maxX = tabsWidth - tabWidth;
        const scrollX = Math.max(minX, Math.min(maxX, tabWidth * Math.round(index)));
        return scrollX / tabWidth;
    }
    render() {
        return h("slot", null);
    }
    static get is() { return "super-tabs-container"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "autoScrollTop": {
            "type": Boolean,
            "attr": "auto-scroll-top"
        },
        "config": {
            "type": "Any",
            "attr": "config",
            "mutable": true
        },
        "el": {
            "elementRef": true
        },
        "moveContainer": {
            "method": true
        },
        "moveContainerByIndex": {
            "method": true
        },
        "queue": {
            "context": "queue"
        },
        "setActiveTabIndex": {
            "method": true
        },
        "swipeEnabled": {
            "type": Boolean,
            "attr": "swipe-enabled"
        }
    }; }
    static get events() { return [{
            "name": "activeTabIndexChange",
            "method": "activeTabIndexChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "selectedTabIndexChange",
            "method": "selectedTabIndexChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get listeners() { return [{
            "name": "window:resize",
            "method": "onWindowResize",
            "passive": true
        }, {
            "name": "touchstart",
            "method": "onTouchStart",
            "passive": true
        }, {
            "name": "touchmove",
            "method": "onTouchMove"
        }, {
            "name": "touchend",
            "method": "onTouchEnd",
            "passive": true
        }]; }
    static get style() { return "/**style-placeholder:super-tabs-container:**/"; }
}
