import { checkGesture, getNormalizedScrollX, pointerCoord, scrollEl, } from '../utils';
export class SuperTabsToolbarComponent {
    constructor() {
        this.showIndicator = true;
        this.color = 'primary';
        this.scrollable = false;
        this.scrollablePadding = true;
        this.activeTabIndex = 0;
        this.leftThreshold = 0;
        this.rightThreshold = 0;
    }
    componentDidLoad() {
        this.indexButtons();
    }
    componentDidUpdate() {
        this.indexButtons();
    }
    setActiveTab(index) {
        this.activeTabIndex = index;
        this.alignIndicator(index, true);
        this.markButtonActive(this.buttons[index]);
    }
    setSelectedTab(index) {
        this.alignIndicator(index);
    }
    moveContainer(scrollX, animate) {
        scrollEl(this.buttonsContainerEl, scrollX, 0, animate ? this.config.transitionDuration : 0, this.queue);
    }
    onWindowResize() {
        this.alignIndicator(this.activeTabIndex);
    }
    onClick(ev) {
        let button = ev.target;
        const tag = button.tagName.toLowerCase();
        if (tag !== 'super-tab-button') {
            if (tag === 'super-tabs-toolbar') {
                return;
            }
            button = button.closest('super-tab-button');
        }
        this.setActiveTab(button.index);
        this.buttonClick.emit(button);
    }
    async onTouchStart(ev) {
        this.queue.read(() => {
            const coords = pointerCoord(ev);
            const vw = this.el.clientWidth;
            if (coords.x < this.leftThreshold || coords.x > vw - this.rightThreshold) {
                this.shouldCapture = false;
                return;
            }
            this.initialCoords = coords;
            this.lastPosX = coords.x;
        });
    }
    async onTouchMove(ev) {
        this.queue.read(() => {
            const coords = pointerCoord(ev);
            if (typeof this.lastPosX !== 'number') {
                return;
            }
            if (!this.isDragging) {
                if (typeof this.shouldCapture !== 'boolean') {
                    this.shouldCapture = checkGesture(coords, this.initialCoords, this.config);
                }
                if (this.shouldCapture !== true) {
                    return;
                }
                this.isDragging = true;
            }
            const deltaX = this.lastPosX - coords.x;
            this.lastPosX = coords.x;
            if (deltaX === 0) {
                return;
            }
            const scrollLeft = this.buttonsContainerEl.scrollLeft;
            const scrollX = getNormalizedScrollX(this.buttonsContainerEl, deltaX);
            if (scrollX === scrollLeft) {
                return;
            }
            this.moveContainer(scrollX, false);
        });
    }
    async onTouchEnd() {
        this.isDragging = false;
        this.shouldCapture = void 0;
        this.lastPosX = void 0;
    }
    indexButtons() {
        const buttons = this.el.querySelectorAll('super-tab-button');
        const buttonsArray = [];
        for (let i = 0; i < buttons.length; i++) {
            const button = buttons[i];
            button.index = i;
            button.scrollableContainer = this.scrollable;
            if (this.activeTabIndex === i) {
                this.markButtonActive(button);
            }
            buttonsArray.push(button);
        }
        this.buttons = buttonsArray;
        this.alignIndicator(this.activeTabIndex);
        if (this.config.sideMenu === 'both' || this.config.sideMenu === 'left') {
            this.leftThreshold = this.config.sideMenuThreshold;
        }
        if (this.config.sideMenu === 'both' || this.config.sideMenu === 'right') {
            this.rightThreshold = this.config.sideMenuThreshold;
        }
    }
    markButtonActive(button) {
        if (this.activeButton) {
            this.activeButton.active = false;
        }
        button.active = true;
        this.activeButton = button;
    }
    adjustContainerScroll(animate) {
        this.queue.read(() => {
            let pos;
            const ip = this.indicatorPosition;
            const iw = this.indicatorWidth;
            const mw = this.buttonsContainerEl.clientWidth;
            const sp = this.buttonsContainerEl.scrollLeft;
            const centerDelta = (mw / 2 - iw / 2);
            if (ip + iw + centerDelta > mw + sp) {
                const delta = ip + iw + centerDelta - mw - sp;
                pos = sp + delta;
            }
            else if (ip - centerDelta < sp) {
                pos = ip - centerDelta;
                pos = Math.max(pos, 0);
                pos = pos > ip ? ip - mw + iw : pos;
            }
            if (typeof pos === 'number') {
                this.moveContainer(pos, animate);
            }
        });
    }
    alignIndicator(index, animate = false) {
        if (!this.showIndicator) {
            return;
        }
        this.queue.read(() => {
            const remainder = index % 1;
            const isDragging = this.isDragging = remainder > 0;
            let position, width;
            const floor = Math.floor(index), ceil = Math.ceil(index);
            const button = this.buttons[floor];
            position = button.offsetLeft;
            width = button.clientWidth;
            if (this.isDragging && floor !== ceil) {
                const buttonB = this.buttons[ceil];
                const buttonBWidth = buttonB.clientWidth;
                const buttonBPosition = buttonB.offsetLeft;
                position += remainder * (buttonBPosition - position);
                width += remainder * (buttonBWidth - width);
            }
            this.indicatorPosition = position;
            this.indicatorWidth = width;
            this.adjustContainerScroll(animate || !isDragging);
            this.queue.write(() => {
                if (!this.showIndicator || this.indicatorEl) {
                    this.indicatorEl.style.setProperty('--st-indicator-position-x', this.indicatorPosition + 'px');
                    this.indicatorEl.style.setProperty('--st-indicator-scale-x', String(this.indicatorWidth / 100));
                    this.indicatorEl.style.setProperty('--st-indicator-transition-duration', this.isDragging ? '0' : `${this.config.transitionDuration}ms`);
                }
            });
        });
    }
    hostData() {
        return {
            class: {
                ['ion-color-' + this.color]: true,
            },
        };
    }
    render() {
        return [
            h("div", { class: "buttons-container", ref: (ref) => this.buttonsContainerEl = ref },
                h("slot", null),
                this.showIndicator &&
                    h("super-tab-indicator", { ref: (ref) => this.indicatorEl = ref, toolbarPosition: this.el.assignedSlot.name })),
        ];
    }
    static get is() { return "super-tabs-toolbar"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "color": {
            "type": String,
            "attr": "color"
        },
        "config": {
            "type": "Any",
            "attr": "config",
            "mutable": true
        },
        "el": {
            "elementRef": true
        },
        "moveContainer": {
            "method": true
        },
        "queue": {
            "context": "queue"
        },
        "scrollable": {
            "type": Boolean,
            "attr": "scrollable",
            "reflectToAttr": true
        },
        "scrollablePadding": {
            "type": Boolean,
            "attr": "scrollable-padding",
            "reflectToAttr": true
        },
        "setActiveTab": {
            "method": true
        },
        "setSelectedTab": {
            "method": true
        },
        "showIndicator": {
            "type": Boolean,
            "attr": "show-indicator"
        }
    }; }
    static get events() { return [{
            "name": "buttonClick",
            "method": "buttonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get listeners() { return [{
            "name": "window:resize",
            "method": "onWindowResize",
            "passive": true
        }, {
            "name": "click",
            "method": "onClick"
        }, {
            "name": "touchstart",
            "method": "onTouchStart",
            "passive": true
        }, {
            "name": "touchmove",
            "method": "onTouchMove",
            "passive": true
        }, {
            "name": "touchend",
            "method": "onTouchEnd",
            "passive": true
        }]; }
    static get style() { return "/**style-placeholder:super-tabs-toolbar:**/"; }
}
