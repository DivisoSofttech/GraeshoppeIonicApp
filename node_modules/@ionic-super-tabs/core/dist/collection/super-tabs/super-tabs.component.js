import { DEFAULT_CONFIG } from '../utils';
export class SuperTabsComponent {
    constructor() {
        this.activeTabIndex = 0;
        this._config = DEFAULT_CONFIG;
    }
    setConfig(config) {
        this._config = Object.assign({}, DEFAULT_CONFIG, config);
        this.container && (this.container.config = this._config);
        this.toolbar && (this.toolbar.config = this._config);
    }
    selectTab(index, animate = true) {
        if (this.container) {
            this.container.moveContainerByIndex(index, animate);
        }
        if (this.toolbar) {
            this.toolbar.setActiveTab(index);
        }
    }
    onConfigChange(config) {
        this.setConfig(config);
    }
    onContainerSelectedTabChange(ev) {
        if (this.toolbar) {
            this.toolbar.setSelectedTab(ev.detail);
        }
    }
    onContainerActiveTabChange(ev) {
        const index = ev.detail;
        this.tabChange.emit({
            changed: index !== this.activeTabIndex,
            index,
        });
        this.activeTabIndex = index;
        this.toolbar && this.toolbar.setActiveTab(index);
    }
    onToolbarButtonClick(ev) {
        const { index } = ev.detail;
        this.container && this.container.setActiveTabIndex(index);
        this.tabChange.emit({
            changed: index !== this.activeTabIndex,
            index,
        });
        this.activeTabIndex = index;
    }
    indexChildren() {
        const container = this.el.querySelector('super-tabs-container');
        const toolbar = this.el.querySelector('super-tabs-toolbar');
        if (container && this.container !== container) {
            this.container = container;
            container.config = this._config;
        }
        if (toolbar && this.toolbar !== toolbar) {
            this.toolbar = toolbar;
            toolbar.config = this._config;
        }
    }
    componentDidUpdate() {
        this.indexChildren();
        this.selectTab(this.activeTabIndex);
    }
    componentWillLoad() {
        this.indexChildren();
        this.selectTab(this.activeTabIndex);
        this.el.addEventListener('selectedTabIndexChange', this.onContainerSelectedTabChange.bind(this));
        this.el.addEventListener('activeTabIndexChange', this.onContainerActiveTabChange.bind(this));
        this.el.addEventListener('buttonClick', this.onToolbarButtonClick.bind(this));
    }
    render() {
        return [
            h("slot", { name: "top" }),
            h("slot", null),
            h("slot", { name: "bottom" }),
        ];
    }
    static get is() { return "super-tabs"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "activeTabIndex": {
            "type": Number,
            "attr": "active-tab-index",
            "reflectToAttr": true,
            "mutable": true
        },
        "config": {
            "type": "Any",
            "attr": "config",
            "watchCallbacks": ["onConfigChange"]
        },
        "el": {
            "elementRef": true
        },
        "selectTab": {
            "method": true
        },
        "setConfig": {
            "method": true
        }
    }; }
    static get events() { return [{
            "name": "tabChange",
            "method": "tabChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:super-tabs:**/"; }
}
