/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';


import {
  SuperTabChangeEventDetail,
  SuperTabsConfig,
} from './interface';
import {
  EventEmitter,
} from './stencil.core';


export namespace Components {

  interface SuperTabButton {
    'active'?: boolean;
    'disabled'?: boolean;
    'index'?: number;
    'scrollableContainer': boolean;
  }
  interface SuperTabButtonAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
  }

  interface SuperTabIndicator {
    'toolbarPosition': 'top' | 'bottom';
  }
  interface SuperTabIndicatorAttributes extends StencilHTMLAttributes {
    'toolbarPosition'?: 'top' | 'bottom';
  }

  interface SuperTab {
    /**
    * Returns the root scrollable element
    */
    'getRootScrollableEl': () => Promise<HTMLElement | null>;
  }
  interface SuperTabAttributes extends StencilHTMLAttributes {}

  interface SuperTabsContainer {
    /**
    * Set to true to automatically scroll to the top of the tab when the button is clicked while the tab is already selected.
    */
    'autoScrollTop': boolean;
    'config'?: SuperTabsConfig;
    'moveContainer': (scrollX: number, animate?: boolean | undefined) => void;
    'moveContainerByIndex': (index: number, animate?: boolean | undefined) => void;
    'setActiveTabIndex': (index: number) => void;
    /**
    * Enable/disable swiping
    */
    'swipeEnabled': boolean;
  }
  interface SuperTabsContainerAttributes extends StencilHTMLAttributes {
    /**
    * Set to true to automatically scroll to the top of the tab when the button is clicked while the tab is already selected.
    */
    'autoScrollTop'?: boolean;
    /**
    * Emits an event when the active tab changes. An active tab is the tab that the user looking at.  This event emitter will not notify you if the user has changed the current active tab. If you need that information, you should use the `tabChange` event emitted by the `super-tabs` element.
    */
    'onActiveTabIndexChange'?: (event: CustomEvent<number>) => void;
    /**
    * Emits events when the container moves. Selected tab index represents what the user should be seeing. If you receive a decimal as the emitted number, it means that the container is moving between tabs. This number is used for animations, and can be used for high tab customizations.
    */
    'onSelectedTabIndexChange'?: (event: CustomEvent<number>) => void;
    /**
    * Enable/disable swiping
    */
    'swipeEnabled'?: boolean;
  }

  interface SuperTabsToolbar {
    /**
    * Background color. Defaults to `'primary'`
    */
    'color': string;
    'config'?: SuperTabsConfig;
    'moveContainer': (scrollX: number, animate?: boolean | undefined) => void;
    /**
    * Whether the toolbar is scrollable. Defaults to `false`.
    */
    'scrollable': boolean;
    /**
    * If scrollable is set to true, there will be an added padding to the left of the buttons.  Setting this property to false will remove that padding.  The padding is also configurable via a CSS variable.
    */
    'scrollablePadding': boolean;
    'setActiveTab': (index: number) => void;
    'setSelectedTab': (index: number) => void;
    /**
    * Whether to show the indicator. Defaults to `true`
    */
    'showIndicator': boolean;
  }
  interface SuperTabsToolbarAttributes extends StencilHTMLAttributes {
    /**
    * Background color. Defaults to `'primary'`
    */
    'color'?: string;
    'onButtonClick'?: (event: CustomEvent<HTMLSuperTabButtonElement>) => void;
    /**
    * Whether the toolbar is scrollable. Defaults to `false`.
    */
    'scrollable'?: boolean;
    /**
    * If scrollable is set to true, there will be an added padding to the left of the buttons.  Setting this property to false will remove that padding.  The padding is also configurable via a CSS variable.
    */
    'scrollablePadding'?: boolean;
    /**
    * Whether to show the indicator. Defaults to `true`
    */
    'showIndicator'?: boolean;
  }

  interface SuperTabs {
    /**
    * Initial active tab index
    */
    'activeTabIndex': number;
    /**
    * Global Super Tabs configuration
    */
    'config'?: SuperTabsConfig;
    /**
    * Set the selected tab. This will move the container and the toolbar to the selected tab.
    */
    'selectTab': (index: number, animate?: boolean) => void;
    'setConfig': (config: SuperTabsConfig) => void;
  }
  interface SuperTabsAttributes extends StencilHTMLAttributes {
    /**
    * Initial active tab index
    */
    'activeTabIndex'?: number;
    /**
    * Global Super Tabs configuration
    */
    'config'?: SuperTabsConfig;
    'onTabChange'?: (event: CustomEvent<SuperTabChangeEventDetail>) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SuperTabButton': Components.SuperTabButton;
    'SuperTabIndicator': Components.SuperTabIndicator;
    'SuperTab': Components.SuperTab;
    'SuperTabsContainer': Components.SuperTabsContainer;
    'SuperTabsToolbar': Components.SuperTabsToolbar;
    'SuperTabs': Components.SuperTabs;
  }

  interface StencilIntrinsicElements {
    'super-tab-button': Components.SuperTabButtonAttributes;
    'super-tab-indicator': Components.SuperTabIndicatorAttributes;
    'super-tab': Components.SuperTabAttributes;
    'super-tabs-container': Components.SuperTabsContainerAttributes;
    'super-tabs-toolbar': Components.SuperTabsToolbarAttributes;
    'super-tabs': Components.SuperTabsAttributes;
  }


  interface HTMLSuperTabButtonElement extends Components.SuperTabButton, HTMLStencilElement {}
  var HTMLSuperTabButtonElement: {
    prototype: HTMLSuperTabButtonElement;
    new (): HTMLSuperTabButtonElement;
  };

  interface HTMLSuperTabIndicatorElement extends Components.SuperTabIndicator, HTMLStencilElement {}
  var HTMLSuperTabIndicatorElement: {
    prototype: HTMLSuperTabIndicatorElement;
    new (): HTMLSuperTabIndicatorElement;
  };

  interface HTMLSuperTabElement extends Components.SuperTab, HTMLStencilElement {}
  var HTMLSuperTabElement: {
    prototype: HTMLSuperTabElement;
    new (): HTMLSuperTabElement;
  };

  interface HTMLSuperTabsContainerElement extends Components.SuperTabsContainer, HTMLStencilElement {}
  var HTMLSuperTabsContainerElement: {
    prototype: HTMLSuperTabsContainerElement;
    new (): HTMLSuperTabsContainerElement;
  };

  interface HTMLSuperTabsToolbarElement extends Components.SuperTabsToolbar, HTMLStencilElement {}
  var HTMLSuperTabsToolbarElement: {
    prototype: HTMLSuperTabsToolbarElement;
    new (): HTMLSuperTabsToolbarElement;
  };

  interface HTMLSuperTabsElement extends Components.SuperTabs, HTMLStencilElement {}
  var HTMLSuperTabsElement: {
    prototype: HTMLSuperTabsElement;
    new (): HTMLSuperTabsElement;
  };

  interface HTMLElementTagNameMap {
    'super-tab-button': HTMLSuperTabButtonElement
    'super-tab-indicator': HTMLSuperTabIndicatorElement
    'super-tab': HTMLSuperTabElement
    'super-tabs-container': HTMLSuperTabsContainerElement
    'super-tabs-toolbar': HTMLSuperTabsToolbarElement
    'super-tabs': HTMLSuperTabsElement
  }

  interface ElementTagNameMap {
    'super-tab-button': HTMLSuperTabButtonElement;
    'super-tab-indicator': HTMLSuperTabIndicatorElement;
    'super-tab': HTMLSuperTabElement;
    'super-tabs-container': HTMLSuperTabsContainerElement;
    'super-tabs-toolbar': HTMLSuperTabsToolbarElement;
    'super-tabs': HTMLSuperTabsElement;
  }


}
