import '../stencil.core';
import { ComponentInterface, EventEmitter, QueueApi } from '../stencil.core';
import { SuperTabsConfig } from '../interface';
export declare class SuperTabsToolbarComponent implements ComponentInterface {
    el: HTMLSuperTabsToolbarElement;
    /** @internal */
    config?: SuperTabsConfig;
    /**
     * Whether to show the indicator. Defaults to `true`
     */
    showIndicator: boolean;
    /**
     * Background color. Defaults to `'primary'`
     */
    color: string;
    /**
     * Whether the toolbar is scrollable. Defaults to `false`.
     */
    scrollable: boolean;
    /**
     * If scrollable is set to true, there will be an added padding
     * to the left of the buttons.
     *
     * Setting this property to false will remove that padding.
     *
     * The padding is also configurable via a CSS variable.
     */
    scrollablePadding: boolean;
    /** @internal */
    queue: QueueApi;
    buttonClick: EventEmitter<HTMLSuperTabButtonElement>;
    private buttons;
    private indicatorPosition;
    private indicatorWidth;
    private activeButton?;
    private activeTabIndex;
    private indicatorEl;
    private buttonsContainerEl;
    private shouldCapture?;
    private initialCoords?;
    private lastPosX?;
    private isDragging?;
    private leftThreshold;
    private rightThreshold;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    /** @internal */
    setActiveTab(index: number): void;
    /** @internal */
    setSelectedTab(index: number): void;
    /** @internal */
    moveContainer(scrollX: number, animate?: boolean): void;
    onWindowResize(): void;
    onClick(ev: any): void;
    onTouchStart(ev: TouchEvent): Promise<void>;
    onTouchMove(ev: TouchEvent): Promise<void>;
    onTouchEnd(): Promise<void>;
    private indexButtons;
    private markButtonActive;
    private adjustContainerScroll;
    private alignIndicator;
    hostData(): {
        class: {
            [x: string]: boolean;
        };
    };
    render(): JSX.Element[];
}
