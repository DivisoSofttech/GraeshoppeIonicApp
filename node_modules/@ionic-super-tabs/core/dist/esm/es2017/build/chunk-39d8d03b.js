import { h } from '../supertabs.core.js';

const DEFAULT_CONFIG = {
    dragThreshold: 10,
    allowElementScroll: false,
    maxDragAngle: 40,
    sideMenuThreshold: 50,
    transitionDuration: 300,
    shortSwipeDuration: 300,
};
function pointerCoord(ev) {
    if (ev) {
        const changedTouches = ev.changedTouches;
        if (changedTouches && changedTouches.length > 0) {
            const touch = changedTouches[0];
            return { x: touch.clientX, y: touch.clientY };
        }
        if (ev.pageX !== undefined) {
            return { x: ev.pageX, y: ev.pageY };
        }
    }
    return { x: 0, y: 0 };
}
const easeInOutCubic = (t) => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
function getScrollCoord(start, dest, startTime, currentTime, duration) {
    const time = Math.min(1, (currentTime - startTime) / duration);
    const timeFn = easeInOutCubic(time);
    return Math.ceil((timeFn * (dest - start)) + start);
}
function scroll(el, startX, startY, x, y, startTime, duration, queue) {
    const currentTime = window.performance.now();
    const scrollX = startX === x ? x : getScrollCoord(startX, x, startTime, currentTime, duration);
    const scrollY = startY === y ? y : getScrollCoord(startY, y, startTime, currentTime, duration);
    el.scrollTo(scrollX, scrollY);
    if (currentTime - startTime >= duration) {
        return;
    }
    queue.write(() => {
        scroll(el, startX, startY, x, y, startTime, duration, queue);
    });
}
const scrollEl = (el, x, y, duration = 300, queue) => {
    if (duration <= 0) {
        queue.write(() => {
            el.scrollTo(x, y);
        });
        return;
    }
    queue.read(() => {
        const startX = el.scrollLeft;
        const startY = el.scrollTop;
        const now = window.performance.now();
        queue.write(() => {
            scroll(el, startX, startY, x, y, now, duration, queue);
        });
    });
};
function checkGesture(newCoords, initialCoords, config) {
    if (!initialCoords) {
        return;
    }
    const radians = config.maxDragAngle * (Math.PI / 180), maxCosine = Math.cos(radians), deltaX = newCoords.x - initialCoords.x, deltaY = newCoords.y - initialCoords.y, distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    if (distance >= config.dragThreshold) {
        const angle = Math.atan2(deltaY, deltaX), cosine = Math.cos(angle);
        return Math.abs(cosine) > maxCosine;
    }
    return;
}
function getScrollX(el, delta) {
    return el.scrollLeft + (typeof delta === 'number' ? delta : 0);
}
function getNormalizedScrollX(el, delta) {
    const minX = 0;
    const maxX = el.scrollWidth - el.clientWidth;
    let scrollX = getScrollX(el, delta);
    scrollX = Math.max(minX, Math.min(maxX, scrollX));
    return scrollX;
}

export { DEFAULT_CONFIG as a, scrollEl as b, pointerCoord as c, checkGesture as d, getNormalizedScrollX as e };
